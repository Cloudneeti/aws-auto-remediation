service: cn-rem-functions

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:env, 'dev'}
  region: ${opt:region}
  remediationversion: ${opt:remediationversion, '1.0'}
  memorySize: 3008
  deploymentBucket:
    name: cn-rem-${self:provider.region}-${self:provider.stage}

functions:   
  invoker:
    handler: invoker.lambda_handler
    name: cn-aws-auto-remediate-invoker
    timeout: 900
    role: CNLambdaRole
    events:
      - cloudwatchEvent:
          name: 'cn-aws-rds-event-rule'
          description: 'CloudWatch Event triggered on rds'
          event:
            source:
              - aws.rds
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - rds.amazonaws.com
              eventName:
                - CreateDBCluster
                - ModifyDBCluster
                - CreateDBInstance
                - ModifyDBInstance
                - RemoveTagsFromResource
      - cloudwatchEvent:
          name: 'cn-aws-cloudtrail-event-rule'
          description: 'CloudWatch Event triggered on cloudtrail'
          event:
            source:
              - aws.cloudtrail
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - cloudtrail.amazonaws.com
              eventName:
                - CreateTrail
                - UpdateTrail
      - cloudwatchEvent:
          name: 'cn-aws-kinesis-event-rule'
          description: 'CloudWatch Event triggered on kinesis'
          event:
            source:
              - aws.kinesis
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - kinesis.amazonaws.com
              eventName:
                - CreateStream
                - DisableEnhancedMonitoring
      - cloudwatchEvent:
          name: 'cn-aws-kms-event-rule'
          description: 'CloudWatch Event triggered on kms'
          event:
            source:
              - aws.kms
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - kms.amazonaws.com
              eventName:
                - CreateKey
                - DisableKeyRotation
      - cloudwatchEvent:
          name: 'cn-aws-elb-event-rule'
          description: 'CloudWatch Event triggered on elb'
          event:
            source:
              - aws.elasticloadbalancing
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - elasticloadbalancing.amazonaws.com
              eventName:
                - CreateLoadBalancer
                - ModifyLoadBalancerAttributes
      - cloudwatchEvent:
          name: 'cn-aws-s3bucket-event-rule'
          description: 'CloudWatch Event triggered on s3bucket'
          event:
            source:
              - aws.s3
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - s3.amazonaws.com
              eventName:
                - CreateBucket
                - PutBucketVersioning
                - DeleteBucketEncryption
                - PutBucketAcl
      - cloudwatchEvent:
          name: 'cn-aws-redshift-event-rule'
          description: 'CloudWatch Event triggered on redshift cluster'
          event:
            source:
              - aws.redshift
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - redshift.amazonaws.com
              eventName:
                - CreateCluster
                - ModifyCluster
    tags:
      ServiceName: auto-remediation-orchestrator-invoker-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
      
resources:
  Resources:
    CNLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-Invoker-${opt:region}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cn-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: AllowIAMForLambdaPolicy2
                Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudtrail:DescribeTrails
                - cloudtrail:GetTrailStatus
                - iam:Get*
                - iam:List*
                Resource: "*"
              - Sid: AllowAssumeRoleForLambdaPolicy2
                Effect: Allow
                Action:
                - sts:AssumeRole
                Resource: 
                - "arn:aws:iam::*:role/CN-Remediation-Invocation-Role"