service: cn-aws-remediate

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:env, 'cn-remediation'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 3008
  deploymentBucket:
    name: cn-rem-${self:provider.stage}

functions:   
  orchestrator:
    handler: orchestrator.lambda_handler
    name: cn-aws-remediate-orchestrator
    timeout: 900
    role: CNLambdaRole
    events:
      - cloudwatchLog: 
          logGroup: 'cn-log-group'
          filter: '{$.eventName="CreateTrail" || $.eventName="StopLogging" || $.eventName="CreateDBCluster" || $.eventName="ModifyDBCluster" || $.eventName="CreateDBInstance" || $.eventName="ModifyDBInstance" || $.eventName="CreateCluster" || $.eventName="ModifyCluster" || $.eventName="CreateBucket" || $.eventName="PutBucketVersioning" || $.eventName="PutAccelerateConfiguration" || $.eventName="PutBucketPublicAccessBlock" || $.eventName="CreateTable" || $.eventName="CreateTableReplica" || $.eventName="RestoreTableFromBackup" || $.eventName="UpdateTable" || $.eventName="UpdateContinuousBackups" || $.eventName="PutConfigurationRecorder" || $.eventName="StopConfigurationRecorder" || $.eventName="UpdateAutoScalingGroup" || $.eventName="CreateAutoScalingGroup" || $.eventName="CreateStack" || $.eventName="UpdateStack" || $.eventName="RunInstances" || $.eventName="StartInstances" || $.eventName="ModifyInstanceAttribute" || $.eventName="CreateQueue" || $.eventName="SetQueueAttributes"}'
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  cloudtrail:
    handler: cloudtrail/cloudtrail_suborchestrator.lambda_handler
    name: cn-aws-remediate-cloudtrail
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  elb:
    handler: elb/elb_suborchestrator.lambda_handler
    name: cn-aws-remediate-elb
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  elbv2:
    handler: elbv2/elbv2_suborchestrator.lambda_handler
    name: cn-aws-remediate-elbv2
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  iam:
    handler: iam/iam_suborchestrator.lambda_handler
    name: cn-aws-remediate-iam
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  kinesis:
    handler: kinesis/kinesis_suborchestrator.lambda_handler
    name: cn-aws-remediate-kinesis
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  kms:
    handler: kms/kms_suborchestrator.lambda_handler
    name: cn-aws-remediate-kms
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  rds_cluster:
    handler: rds_cluster/rdscluster_suborchestrator.lambda_handler
    name: cn-aws-remediate-rdscluster
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  rds_instance:
    handler: rds_instance/rdsinstance_suborchestrator.lambda_handler
    name: cn-aws-remediate-rdsinstance
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  redshift:
    handler: redshift/redshift_suborchestrator.lambda_handler
    name: cn-aws-remediate-redshift
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  s3:
    handler: s3/s3_suborchestrator.lambda_handler
    name: cn-aws-remediate-s3-bucket
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  neptune_cluster:
    handler: neptune_cluster/neptunecluster_suborchestrator.lambda_handler
    name: cn-aws-remediate-neptune-cluster
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  neptune_instance:
    handler: neptune_instance/neptuneinstance_suborchestrator.lambda_handler
    name: cn-aws-remediate-neptune-instance
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  ec2:
    handler: ec2/ec2instance_suborchestrator.lambda_handler
    name: cn-aws-remediate-ec2-instance
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  dynamodb:
    handler: dynamodb/dynamodb_suborchestrator.lambda_handler
    name: cn-aws-remediate-dynamodb
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  config:
    handler: config/config_suborchestrator.lambda_handler
    name: cn-aws-remediate-config
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  asg:
    handler: asg/asg_suborchestrator.lambda_handler
    name: cn-aws-remediate-asg
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  cloudformation:
    handler: cloudformation/cloudformation_suborchestrator.lambda_handler
    name: cn-aws-remediate-cloudformation
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  sqs:
    handler: sqs/sqs_suborchestrator.lambda_handler
    name: cn-aws-remediate-sqs
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  rds_snapshots:
    handler: rds_snapshots/rdssnapshot_suborchestrator.lambda_handler
    name: cn-aws-remediate-rdssnapshot
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
    
resources:
  Resources:
    CNCloudTrail:
      Type: AWS::CloudTrail::Trail
      Properties: 
        CloudWatchLogsLogGroupArn: "arn:aws:logs:us-east-1:${opt:aws-account-id}:log-group:cn-log-group:*"
        CloudWatchLogsRoleArn: "arn:aws:iam::${opt:aws-account-id}:role/CN-CloudwatchRole"
        IncludeGlobalServiceEvents: true
        IsLogging: true
        IsMultiRegionTrail: true
        S3BucketName: cn-rem-${self:provider.stage}
        S3KeyPrefix: cn-ctlogs
        TrailName: cn-remediation-trail
        Tags: 
          -
            Key: "ServiceName"
            Value: "auto-remediation-trail"
          -
            Key: "Version"
            Value: "${opt:version, '1.0'}"
          -
            Key: "Description"
            Value: "Cloudneeti automatic remediation solution for making cloud resource compliant"
          -
            Key: "Environment"
            Value: "${opt:env, 'cn-remediation'}"
    CloudneetiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-Auto-Remediation-Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "arn:aws:iam::${opt:aws-account-id}:root" 
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/SecurityAudit"
        Policies:
        - PolicyName: cn-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: AllowIAMForLambdaPolicy
              Effect: Allow
              Action:
              - lambda:InvokeFunction
              - cloudtrail:UpdateTrail
              - cloudtrail:StartLogging
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - iam:UpdateAccountPasswordPolicy
              - iam:PassRole
              - kinesis:StartStreamEncryption
              - kinesis:EnableEnhancedMonitoring
              - kms:EnableKeyRotation
              - rds:ModifyDBCluster
              - rds:ModifyDBInstance
              - rds:AddTagsToResource
              - rds:ModifyDBSnapshot
              - rds:ModifyDBSnapshotAttribute
              - redshift:ModifyCluster
              - s3:PutBucketVersioning
              - s3:PutEncryptionConfiguration
              - s3:PutBucketAcl
              - s3:PutAccelerateConfiguration
              - s3:PutBucketPublicAccessBlock
              - s3:PutBucketLogging
              - dynamodb:UpdateContinuousBackups
              - ec2:MonitorInstances
              - ec2:ModifyInstanceAttribute
              - autoscaling:UpdateAutoScalingGroup
              - cloudformation:UpdateTerminationProtection
              - config:PutConfigurationRecorder
              - sqs:SetQueueAttributes
              Resource: "*"
    CNOrchestratorRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-Remediation-Invocation-Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "arn:aws:iam::079042248639:root"   # Add the Cloudneeti AWS Account ID
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cn-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: InvokeLambdaPolicy
                Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: "*"
    CNLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-OrchesLambdaRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cn-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: AllowIAMForLambdaPolicy
                Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudtrail:DescribeTrails
                - cloudtrail:GetTrailStatus
                - s3:ListAllMyBuckets
                - s3:GetObject
                - s3:PutObject
                - lambda:InvokeFunction
                Resource: "*"
              - Sid: AllowAssumeRoleForLambdaPolicy
                Effect: Allow
                Action:
                - sts:AssumeRole
                Resource: 
                - "arn:aws:iam::*:role/CN-Auto-Remediation-Role"
