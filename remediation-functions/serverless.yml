service: cn-rem-functions

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:env, 'dev'}
  region: ${opt:region, 'us-east-1'}
  remediationversion: ${opt:remediationversion, '2.0'}
  memorySize: 3008
  deploymentBucket:
    name: cn-rem-${self:provider.stage}

functions:   
  orchestrator:
    handler: orchestrator.lambda_handler
    name: cn-aws-remediate-orchestrator
    timeout: 900
    role: CNLambdaRole
    events:
      - cloudwatchEvent:
          name: 'cn-aws-asg-event-rule'
          description: 'CloudWatch Event triggered on asg'
          event:
            source:
              - aws.autoscaling
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - autoscaling.amazonaws.com
              eventName:
                - UpdateAutoScalingGroup
                - CreateAutoScalingGroup
      - cloudwatchEvent:
          name: 'cn-aws-cloudformation-event-rule'
          description: 'CloudWatch Event triggered on cloudformation stack'
          event:
            source:
              - aws.cloudformation
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - cloudformation.amazonaws.com
              eventName:
                - CreateStack
                - UpdateTerminationProtection
      - cloudwatchEvent:
          name: 'cn-aws-cloudtrail-event-rule'
          description: 'CloudWatch Event triggered on cloudtrail'
          event:
            source:
              - aws.cloudtrail
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - cloudtrail.amazonaws.com
              eventName:
                - CreateTrail
                - UpdateTrail
                - StopLogging
      - cloudwatchEvent:
          name: 'cn-aws-config-event-rule'
          description: 'CloudWatch Event triggered on config'
          event:
            source:
              - aws.config
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - config.amazonaws.com
              eventName:
                - PutConfigurationRecorder
                - StopConfigurationRecorder
      - cloudwatchEvent:
          name: 'cn-aws-dynamodb-event-rule'
          description: 'CloudWatch Event triggered on dynamodb'
          event:
            source:
              - aws.dynamodb
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - dynamodb.amazonaws.com
              eventName:
                - CreateTable
                - RestoreTableFromBackup
                - UpdateTable
                - UpdateContinuousBackups
      - cloudwatchEvent:
          name: 'cn-aws-ec2-event-rule'
          description: 'CloudWatch Event triggered on ec2'
          event:
            source:
              - aws.ec2
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - ec2.amazonaws.com
              eventName:
                - RunInstances
                - StartInstances
                - ModifyInstanceAttribute
                - UnmonitorInstances
      - cloudwatchEvent:
          name: 'cn-aws-elb-event-rule'
          description: 'CloudWatch Event triggered on elb'
          event:
            source:
              - aws.elasticloadbalancing
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - elasticloadbalancing.amazonaws.com
              eventName:
                - CreateLoadBalancer
                - ModifyLoadBalancerAttributes
      - cloudwatchEvent:
          name: 'cn-aws-iam-event-rule'
          description: 'CloudWatch Event triggered on iam'
          event:
            source:
              - aws.iam
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - iam.amazonaws.com
              eventName:
                - UpdateAccountPasswordPolicy
                - DeleteAccountPasswordPolicy
      - cloudwatchEvent:
          name: 'cn-aws-kinesis-event-rule'
          description: 'CloudWatch Event triggered on kinesis'
          event:
            source:
              - aws.kinesis
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - kinesis.amazonaws.com
              eventName:
                - CreateStream
                - StopStreamEncryption
                - DisableEnhancedMonitoring
      - cloudwatchEvent:
          name: 'cn-aws-kms-event-rule'
          description: 'CloudWatch Event triggered on kms'
          event:
            source:
              - aws.kms
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - kms.amazonaws.com
              eventName:
                - CreateKey
                - DisableKeyRotation
      - cloudwatchEvent:
          name: 'cn-aws-rds-event-rule'
          description: 'CloudWatch Event triggered on rds/neptune/docdb'
          event:
            source:
              - aws.rds
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - rds.amazonaws.com
              eventName:
                - CreateDBCluster
                - ModifyDBCluster
                - CreateDBInstance
                - ModifyDBInstance
                - ModifyDBClusterSnapshotAttribute
                - ModifyDBSnapshotAttribute
                - ModifyDBParameterGroup
      - cloudwatchEvent:
          name: 'cn-aws-redshift-event-rule'
          description: 'CloudWatch Event triggered on redshift cluster'
          event:
            source:
              - aws.redshift
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - redshift.amazonaws.com
              eventName:
                - CreateCluster
                - ModifyCluster
      - cloudwatchEvent:
          name: 'cn-aws-s3bucket-event-rule'
          description: 'CloudWatch Event triggered on s3bucket'
          event:
            source:
              - aws.s3
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - s3.amazonaws.com
              eventName:
                - CreateBucket
                - PutBucketVersioning
                - DeleteBucketEncryption
                - PutBucketAcl
                - PutAccelerateConfiguration
                - PutBucketPublicAccessBlock
                - PutBucketLogging
      - cloudwatchEvent:
          name: 'cn-aws-sqs-event-rule'
          description: 'CloudWatch Event triggered on sqs queue'
          event:
            source:
              - aws.sqs
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sqs.amazonaws.com
              eventName:
                - CreateQueue
                - SetQueueAttributes
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  cloudtrail:
    handler: cloudtrail/cloudtrail_suborchestrator.lambda_handler
    name: cn-aws-remediate-cloudtrail
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  elb:
    handler: elb/elb_suborchestrator.lambda_handler
    name: cn-aws-remediate-elb
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  elbv2:
    handler: elbv2/elbv2_suborchestrator.lambda_handler
    name: cn-aws-remediate-elbv2
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  iam:
    handler: iam/iam_suborchestrator.lambda_handler
    name: cn-aws-remediate-iam
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  kinesis:
    handler: kinesis/kinesis_suborchestrator.lambda_handler
    name: cn-aws-remediate-kinesis
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  kms:
    handler: kms/kms_suborchestrator.lambda_handler
    name: cn-aws-remediate-kms
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  rds_cluster:
    handler: rds_cluster/rdscluster_suborchestrator.lambda_handler
    name: cn-aws-remediate-rdscluster
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  rds_instance:
    handler: rds_instance/rdsinstance_suborchestrator.lambda_handler
    name: cn-aws-remediate-rdsinstance
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  redshift:
    handler: redshift/redshift_suborchestrator.lambda_handler
    name: cn-aws-remediate-redshift
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  s3:
    handler: s3/s3_suborchestrator.lambda_handler
    name: cn-aws-remediate-s3-bucket
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:remediationversion}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  neptune_cluster:
    handler: neptune_cluster/neptunecluster_suborchestrator.lambda_handler
    name: cn-aws-remediate-neptune-cluster
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  neptune_instance:
    handler: neptune_instance/neptuneinstance_suborchestrator.lambda_handler
    name: cn-aws-remediate-neptune-instance
    timeout: 900
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  ec2:
    handler: ec2/ec2instance_suborchestrator.lambda_handler
    name: cn-aws-remediate-ec2-instance
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  dynamodb:
    handler: dynamodb/dynamodb_suborchestrator.lambda_handler
    name: cn-aws-remediate-dynamodb
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  config:
    handler: config/config_suborchestrator.lambda_handler
    name: cn-aws-remediate-config
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  asg:
    handler: asg/asg_suborchestrator.lambda_handler
    name: cn-aws-remediate-asg
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  cloudformation:
    handler: cloudformation/cloudformation_suborchestrator.lambda_handler
    name: cn-aws-remediate-cloudformation
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  sqs:
    handler: sqs/sqs_suborchestrator.lambda_handler
    name: cn-aws-remediate-sqs
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  rds_snapshots:
    handler: rds_snapshots/rdssnapshot_suborchestrator.lambda_handler
    name: cn-aws-remediate-rdssnapshot
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  docdb_instance:
    handler: docdb_instance/documentdbinstance_suborchestrator.lambda_handler
    name: cn-aws-remediate-documentdb-instance
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  docdb_cluster:
    handler: docdb_cluster/documentdbcluster_suborchestrator.lambda_handler
    name: cn-aws-remediate-documentdb-cluster
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}

  fsx_windows:
    handler: fsx_windows/fsx_windows_suborchestrator.lambda_handler
    name: cn-aws-remediate-fsx-windows
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
  
  kinesis_firehose:
    handler: kinesis_firehose/kinesis_firehose_suborchestrator.lambda_handler
    name: cn-aws-remediate-kinesis-firehose
    timeout: 300
    role: CNLambdaRole
    tags:
      ServiceName: auto-remediation-lambda
      Version: ${opt:version, '1.0'}
      Description: Cloudneeti automatic remediation solution for making cloud resource compliant
      Environment: ${opt:env, 'cn-remediation'}
    
resources:
  Resources:
    CNCloudTrail:
      Type: AWS::CloudTrail::Trail
      Properties: 
        CloudWatchLogsLogGroupArn: "arn:aws:logs:${opt:region}:${opt:aws-account-id}:log-group:cn-log-group:*"
        CloudWatchLogsRoleArn: "arn:aws:iam::${opt:aws-account-id}:role/CN-CloudwatchRole"
        IncludeGlobalServiceEvents: true
        IsLogging: true
        IsMultiRegionTrail: true
        S3BucketName: cn-rem-${self:provider.stage}
        S3KeyPrefix: cn-ctlogs
        TrailName: cn-remediation-trail
        Tags: 
          -
            Key: "ServiceName"
            Value: "auto-remediation-trail"
          -
            Key: "Version"
            Value: "${opt:remediationversion}"
          -
            Key: "Description"
            Value: "Cloudneeti automatic remediation solution for making cloud resource compliant"
          -
            Key: "Environment"
            Value: "${opt:env, 'cn-remediation'}"
    CloudneetiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-Auto-Remediation-Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "arn:aws:iam::${opt:aws-account-id}:root" 
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/SecurityAudit"
        Policies:
        - PolicyName: cn-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: AllowIAMForLambdaPolicy
              Effect: Allow
              Action:
              - lambda:InvokeFunction
              - autoscaling:UpdateAutoScalingGroup
              - cloudformation:UpdateTerminationProtection
              - cloudtrail:StartLogging
              - cloudtrail:UpdateTrail
              - config:PutConfigurationRecorder
              - dynamodb:UpdateContinuousBackups
              - ec2:MonitorInstances
              - ec2:ModifyInstanceAttribute
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - iam:UpdateAccountPasswordPolicy
              - iam:PassRole
              - kinesis:StartStreamEncryption
              - kinesis:EnableEnhancedMonitoring
              - kms:EnableKeyRotation
              - rds:ModifyDBCluster
              - rds:ModifyDBInstance
              - rds:ModifyDBParameterGroup
              - rds:ModifyDBClusterSnapshotAttribute
              - rds:ModifyDBSnapshotAttribute
              - redshift:ModifyCluster
              - s3:PutBucketVersioning
              - s3:PutEncryptionConfiguration
              - s3:PutBucketAcl
              - s3:PutAccelerateConfiguration
              - s3:PutBucketPublicAccessBlock
              - s3:PutBucketLogging
              - sqs:CreateQueue
              - sqs:SetQueueAttributes
              Resource: "*"
    CNOrchestratorRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-Remediation-Invocation-Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "arn:aws:iam::079042248639:root"   # Add the Cloudneeti AWS Account ID
                  - "arn:aws:iam::${opt:aws-account-id}:role/CN-Auto-Remediation-Invoker"
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cn-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: InvokeLambdaPolicy
                Effect: Allow
                Action:
                - lambda:InvokeFunction
                - lambda:GetFunction
                Resource: "*"
    CNLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CN-OrchesLambdaRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cn-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: AllowIAMForLambdaPolicy
                Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudtrail:DescribeTrails
                - cloudtrail:GetTrailStatus
                - s3:ListAllMyBuckets
                - s3:GetObject
                - s3:PutObject
                - s3:GetBucketVersioning
                - lambda:InvokeFunction
                Resource: "*"
              - Sid: AllowAssumeRoleForLambdaPolicy
                Effect: Allow
                Action:
                - sts:AssumeRole
                Resource: 
                - "arn:aws:iam::*:role/CN-Auto-Remediation-Role"