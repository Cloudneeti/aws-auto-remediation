Parameters:
    Stack:
        Description: Stack name
        Type: String
        Default: dev
    awsaccountid:
        Description: AWS Account ID
        Type: String
    remaccountid:
        Description: AWS Account ID
        Type: String
    region:
        Description: Region of deployment
        Type: String
        Default: us-east-1
    remediationregion:
        Description: Region of framework
        Type: String
        Default: us-east-1
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
        BucketName:
          Fn::Join:
          - ""
          - - !Ref Stack
        BucketEncryption:
            ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
        LifecycleConfiguration:
            Rules:
            - Id: Delete-ct-logs
              Prefix: cn-ctlogs/
              Status: Enabled
              ExpirationInDays: 1
              NoncurrentVersionExpirationInDays: 1
        VersioningConfiguration:
            Status: Enabled
        Tags: 
          -
            Key: "ServiceName"
            Value: "auto-remediation-deployment-bucket"
          -
            Key: "Description"
            Value: "Cloudneeti automatic remediation solution for making cloud resource compliant"
  CTBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3Bucket
    Properties: 
      Bucket:
        Fn::Join:
        - ""
        - - !Ref Stack
      PolicyDocument:
        Statement:
          - Sid: CTBucketPolicy1
            Action:
              - "s3:GetBucketAcl"
            Effect: "Allow"
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Resource:
              Fn::Join:
              - ""
              - - 'arn:aws:s3:::'
                - !Ref Stack
          - Sid: CTBucketPolicy2
            Action:
              - "s3:PutObject"
            Effect: "Allow"
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Resource:
              Fn::Join:
              - ""
              - - 'arn:aws:s3:::'
                - !Ref Stack
                - '/cn-ctlogs/AWSLogs/'
                - !Ref awsaccountid
                - '/*'
            Condition:
              StringLike: 
                s3:x-amz-acl: 
                  - "bucket-owner-full-control"
  CNLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: cn-log-group
  CNCloudwatchRole: 
    Type: AWS::IAM::Role
    DependsOn: CNLogGroup 
    Properties:
      RoleName: CN-CloudwatchRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: cn-cloudwatch-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Sid: "CTCWPolicy1"
              Effect: "Allow"
              Action:
              - "logs:CreateLogStream"
              Resource: 
                Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - !Ref region
                  - ':'
                  - !Ref awsaccountid
                  - ':log-group:cn-log-group:*'
            - Sid: "CTCWPolicy2"
              Effect: "Allow"
              Action:
              - "logs:PutLogEvents"
              Resource: 
                Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - !Ref region
                  - ':'
                  - !Ref awsaccountid
                  - ':log-group:cn-log-group:*'
  CNCloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: CTBucketPolicy
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: 
        Fn::Join:
        - ""
        - - !Ref Stack
      S3KeyPrefix: cn-ctlogs
      TrailName: cn-remediation-trail
      Tags: 
        -
          Key: "ServiceName"
          Value: "auto-remediation-trail"
        -
          Key: "Version"
          Value: "2.0"
        -
          Key: "Description"
          Value: "Cloudneeti automatic remediation solution for making cloud resource compliant"
        -
          Key: "Environment"
          Value: "cn-remediation"
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: CNLambdaRole
    Properties:
      FunctionName: cn-aws-auto-remediate-invoker
      Role: 
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - !Ref awsaccountid
          - ':role/CN-Auto-Remediation-Invoker'
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 900 #seconds
      Environment:
        Variables: 
          referenceregion : !Ref remediationregion
      MemorySize: 3008 #max memory foot print
      Code:
        ZipFile:  |
          import json
          import boto3
          from botocore.exceptions import ClientError
          import os

          def getCredentials(roleArn, roleSessionName='CN-RemSession'):
            sts_client = boto3.client('sts')
            try:
                response = sts_client.assume_role(RoleArn=roleArn,RoleSessionName=roleSessionName)
            except Exception as e:
                return print("Error when getting AssumeRole "+e)
            cred = response['Credentials']
            return cred['AccessKeyId'], cred['SecretAccessKey'], cred['SessionToken']

          def lambda_handler(event, context):
            #multi-event customer account CW event
            try:
              runtime_region = os.environ['referenceregion']
            except:
              runtime_region = 'us-east-1'

            try:
              cw_event_data = event['detail']
            except:
              cw_event_data = ''

            #multi-account verify access
            try:
              VerifyAccess = json.loads(event['body'])['VerifyAccess']
              print(VerifyAccess)
            except:
              VerifyAccess = '' 

            #trigger by cw logs
            if cw_event_data:
              try:
                AWSAccId = cw_event_data["userIdentity"]["accountId"]
                EventName = cw_event_data["eventName"]
                EventSource = cw_event_data["userIdentity"]["arn"]
              except ClientError as e:
                print(e)
              except Exception as e: 
                print(e)

              if "assumed-role/CN-Auto-Remediation-Role" not in str(EventSource):
                try:
                  iam = boto3.client("iam")
                  role_det = iam.get_role(RoleName='CN-Auto-Remediation-Role')['Role']['AssumeRolePolicyDocument']['Statement']
                  for i in range(len(role_det)):
                    if AWSAccId not in str(role_det[i]['Principal']):
                      RemAccDet = role_det[i]['Principal']['AWS']
                      RemAccId = (RemAccDet.split('arn:aws:iam::')[1]).split(':root')[0]
                      break
                except ClientError as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}
                except Exception as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}
                        
                try:  # common code
                  remdiationfunc_rolearn = 'arn:aws:iam::' + RemAccId + ':role/CN-Remediation-Invocation-Role'
                  aws_access_key_id, aws_secret_access_key, aws_session_token = getCredentials(remdiationfunc_rolearn)
                except ClientError as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}
                except Exception as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}

                try:
                  invokeLambda = boto3.client('lambda',aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key,aws_session_token=aws_session_token, region_name=runtime_region)
                  response = invokeLambda.invoke(FunctionName = 'cn-aws-remediate-orchestrator', InvocationType = 'RequestResponse', Payload = json.dumps(event))
                  t = json.loads(response['Payload'].read())
                  print(t['body'])
                  return {
                      'statusCode': 200,
                      'body': json.dumps(t)
                  }
                except ClientError as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}
                except Exception as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}
              else:
                return {'statusCode': 200,'body': json.dumps("Resource already remediated")}
            elif VerifyAccess:       
              IsVerified = True 
              try:  # common code 
                CustAccID = json.loads(event['body'])['RemediationAWSAccountId']
              except:
                IsVerified = False
              return IsVerified
  ASGEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-asg-event-rule"
      Description: "CloudWatch Event triggered on ASG update"
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "autoscaling.amazonaws.com"
          eventName:
            - "UpdateAutoScalingGroup"
            - "CreateAutoScalingGroup"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForASGToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ASGEventRule"
          - "Arn"
  CloudFormationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-cloudformation-event-rule"
      Description: "CloudWatch Event triggered on cloudformation stack update"
      EventPattern:
        source:
          - "aws.cloudformation"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudformation.amazonaws.com"
          eventName:
            - "CreateStack"
            - "UpdateTerminationProtection"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForCloudtrailEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudFormationEventRule"
          - "Arn"
  CloudtrailEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-cloudtrail-event-rule"
      Description: "CloudWatch Event triggered on cloudtrail"
      EventPattern:
        source:
          - "aws.cloudtrail"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudtrail.amazonaws.com"
          eventName:
            - "CreateTrail"
            - "UpdateTrail"
            - "StopLogging"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForCloudtrailEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudtrailEventRule"
          - "Arn"
  ConfigEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-config-event-rule"
      Description: "CloudWatch Event triggered on config changes"
      EventPattern:
        source:
          - "aws.config"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "config.amazonaws.com"
          eventName:
            - "PutConfigurationRecorder"
            - "StopConfigurationRecorder"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForConfigEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ConfigEventRule"
          - "Arn"
  DynamoDBEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-dynamodb-event-rule"
      Description: "CloudWatch Event triggered on dynamodb changes"
      EventPattern:
        source:
          - "aws.dynamodb"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "dynamodb.amazonaws.com"
          eventName:
            - "CreateTable"
            - "RestoreTableFromBackup"
            - "UpdateTable"
            - "UpdateContinuousBackups"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForDynamoDBEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DynamoDBEventRule"
          - "Arn"
  EC2EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-ec2instance-event-rule"
      Description: "CloudWatch Event triggered on ec2 instance update"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "RunInstances"
            - "StartInstances"
            - "ModifyInstanceAttribute"
            - "UnmonitorInstances"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEC2EventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EC2EventRule"
          - "Arn"
  ELBEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-elb-event-rule"
      Description: "CloudWatch Event triggered on elb"
      EventPattern:
        source:
          - "aws.elasticloadbalancing"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "elasticloadbalancing.amazonaws.com"
          eventName:
            - "CreateLoadBalancer"
            - "ModifyLoadBalancerAttributes"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForELBEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ELBEventRule"
          - "Arn"
  IAMEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-iam-event-rule"
      Description: "CloudWatch Event triggered on iam changes"
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "iam.amazonaws.com"
          eventName:
            - "UpdateAccountPasswordPolicy"
            - "DeleteAccountPasswordPolicy"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForKinesisEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "IAMEventRule"
          - "Arn"
  KinesisEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-kinesis-event-rule"
      Description: "CloudWatch Event triggered on kinesis"
      EventPattern:
        source:
          - "aws.kinesis"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "kinesis.amazonaws.com"
          eventName:
            - "CreateStream"
            - "StopStreamEncryption"
            - "DisableEnhancedMonitoring"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForKinesisEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "KinesisEventRule"
          - "Arn"
  KMSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-kms-event-rule"
      Description: "CloudWatch Event triggered on kms"
      EventPattern:
        source:
          - "aws.kms"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "kms.amazonaws.com"
          eventName:
            - "CreateKey"
            - "DisableKeyRotation"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForKMSEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "KMSEventRule"
          - "Arn"
  RDSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-rds-event-rule"
      Description: "CloudWatch Event triggered on rds"
      EventPattern:
        source:
          - "aws.rds"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "rds.amazonaws.com"
          eventName:
            - "CreateDBCluster"
            - "ModifyDBCluster"
            - "CreateDBInstance"
            - "ModifyDBInstance"
            - "ModifyDBClusterSnapshotAttribute"
            - "ModifyDBSnapshotAttribute"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForRDSEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RDSEventRule"
          - "Arn"
  RedshiftEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-redshift-event-rule"
      Description: "CloudWatch Event triggered on redshift cluster"
      EventPattern:
        source:
          - "aws.redshift"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "redshift.amazonaws.com"
          eventName:
            - "CreateCluster"
            - "ModifyCluster"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForRedshiftEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RedshiftEventRule"
          - "Arn"
  S3EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-s3bucket-event-rule"
      Description: "CloudWatch Event triggered on s3 bucket"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "CreateBucket"
            - "PutBucketVersioning"
            - "DeleteBucketEncryption"
            - "PutBucketAcl"
            - "PutBucketPublicAccessBlock"
            - "PutBucketLogging"
            - "PutAccelerateConfiguration"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForS3EventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3EventRule"
          - "Arn"
  SQSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-sqs-event-rule"
      Description: "CloudWatch Event triggered on sqs update"
      EventPattern:
        source:
          - "aws.sqs"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "sqs.amazonaws.com"
          eventName:
            - "CreateQueue"
            - "SetQueueAttributes"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForSQSEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "SQSEventRule"
          - "Arn"
  Route53DomainEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-route53domain-event-rule"
      Description: "CloudWatch Event triggered on route53 domain changes"
      EventPattern:
        source:
          - "aws.route53"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "route53.amazonaws.com"
          eventName:
            - "DisableDomainAutoRenew"
            - "DisableDomainTransferLock"
            - "UpdateDomainContact"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForRoute53EventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "Route53DomainEventRule"
          - "Arn"
  KinesisFirehoseEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "cn-aws-kinesis-firehose-event-rule"
      Description: "CloudWatch Event triggered on kinesis firehose update"
      EventPattern:
        source:
          - "aws.firehose"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "firehose.amazonaws.com"
          eventName:
            - "StopDeliveryStreamEncryption"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForKinesisFirehoseEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "KinesisFirehoseEventRule"
          - "Arn"
  CloudneetiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CN-Auto-Remediation-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                Fn::Join:
                - ""
                - - "arn:aws:iam::"
                  - !Ref remaccountid
                  - ":root" 
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/SecurityAudit"
      Policies:
      - PolicyName: cn-lambda-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: AllowIAMForLambdaPolicy
            Effect: Allow
            Action:              
            - "lambda:InvokeFunction"
            - "cloudtrail:UpdateTrail"
            - "elasticloadbalancing:ModifyLoadBalancerAttributes"
            - "iam:UpdateAccountPasswordPolicy"
            - "kinesis:StartStreamEncryption"
            - "kinesis:EnableEnhancedMonitoring"
            - "kms:EnableKeyRotation"
            - "rds:ModifyDBCluster"
            - "rds:ModifyDBInstance"
            - "redshift:ModifyCluster"
            - "s3:PutBucketVersioning"
            - "s3:PutEncryptionConfiguration"
            - "s3:PutBucketAcl"
            Resource: "*"
  CNLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CN-Auto-Remediation-Invoker
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: cn-lambda-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Sid: "AllowIAMForLambdaPolicy"
              Effect: "Allow"
              Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "cloudtrail:DescribeTrails"
              - "cloudtrail:GetTrailStatus"
              - "iam:Get*"
              - "iam:List*"
              Resource: "*"
            - Sid: "AllowAssumeRoleForLambdaPolicy"
              Effect: "Allow"
              Action:
              - "sts:AssumeRole"
              Resource: 
              - "arn:aws:iam::*:role/CN-Remediation-Invocation-Role"