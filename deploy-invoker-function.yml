#Copyright (c) Cloudneeti. All rights reserved.
#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:
#The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Parameters:
  awsaccountid:
      Description: AWS Account ID
      Type: String
  remediationregion:
      Description: Region of framework
      Type: String
      Default: us-east-1

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: zcspm-aws-auto-remediate-invoker
      Role: 
        Fn::Join:
          - ""
          - - 'arn:aws:iam::'
            - !Ref awsaccountid
            - ':'
            - role/ZCSPM-AutoRem-InvokerFunction-Role
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 900 #seconds
      MemorySize: 3008 #max memory foot print
      Environment:
        Variables: 
          remfwRegion : !Ref remediationregion
      Code:
        ZipFile:  |
          import os
          import json
          import boto3

          def lambda_handler(event, context):
            try:
              cw_event_data = event['detail']
            except:
              cw_event_data = ''

            try:
              primary_region=os.environ['remfwRegion']
            except:
              primary_region=''

            if cw_event_data and primary_region:
              try:
                AWSAccId = cw_event_data["userIdentity"]["accountId"]
                EventSource = cw_event_data["userIdentity"]["arn"]
              except Exception as e:
                return {'statusCode': 400,'body': json.dumps(str(e))}

              if "assumed-role/ZCSPM-Auto-Remediation-Role" not in str(EventSource):        
                remdiationfunc_rolearn = 'arn:aws:iam::' + AWSAccId + ':role/ZCSPM-Remediation-Invocation-Role'
                try:
                  sts_client = boto3.client('sts')
                  response = sts_client.assume_role(RoleArn=remdiationfunc_rolearn,RoleSessionName='ZCSPM-RemSession')

                  cred = response['Credentials']
                  aws_access_key_id=cred['AccessKeyId']
                  aws_secret_access_key=cred['SecretAccessKey']
                  aws_session_token=cred['SessionToken']
                except Exception as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}

                try:
                  lambda_client = boto3.client('lambda',aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key,aws_session_token=aws_session_token, region_name=primary_region)
                  response = lambda_client.invoke(FunctionName = 'zcspm-aws-remediate-orchestrator', InvocationType = 'RequestResponse', Payload = json.dumps(event))
                  t = json.loads(response['Payload'].read())
                  print(t['body'])
                  return {
                      'statusCode': 200,
                      'body': json.dumps(t)
                  }
                except Exception as e:
                  return {'statusCode': 400,'body': json.dumps(str(e))}

              else:
                print("Policies not configured for remediation")
                return {'statusCode': 200,'body': json.dumps("Policies not configured for remediation")}
            
            else:
                return {'statusCode': 400,'body': json.dumps("Either the event source or the primary remediation framework region is invalid!")}
  ASGEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-asg-event-rule"
      Description: "CloudWatch Event triggered on ASG update"
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "autoscaling.amazonaws.com"
          eventName:
            - "UpdateAutoScalingGroup"
            - "CreateAutoScalingGroup"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForASGToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ASGEventRule"
          - "Arn"
  CloudFormationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-cloudformation-event-rule"
      Description: "CloudWatch Event triggered on cloudformation stack update"
      EventPattern:
        source:
          - "aws.cloudformation"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudformation.amazonaws.com"
          eventName:
            - "CreateStack"
            - "UpdateTerminationProtection"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForCloudformationToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudFormationEventRule"
          - "Arn"
  CloudtrailEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-cloudtrail-event-rule"
      Description: "CloudWatch Event triggered on cloudtrail"
      EventPattern:
        source:
          - "aws.cloudtrail"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudtrail.amazonaws.com"
          eventName:
            - "CreateTrail"
            - "UpdateTrail"
            - "StopLogging"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForCloudtrailEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudtrailEventRule"
          - "Arn"
  DynamoDBEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-dynamodb-event-rule"
      Description: "CloudWatch Event triggered on dynamodb changes"
      EventPattern:
        source:
          - "aws.dynamodb"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "dynamodb.amazonaws.com"
          eventName:
            - "CreateTable"
            - "RestoreTableFromBackup"
            - "UpdateTable"
            - "UpdateContinuousBackups"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForDynamoDBEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DynamoDBEventRule"
          - "Arn"
  EC2EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-ec2instance-event-rule"
      Description: "CloudWatch Event triggered on ec2 instance update"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "RunInstances"
            - "StartInstances"
            - "ModifyInstanceAttribute"
            - "UnmonitorInstances"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEC2EventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EC2EventRule"
          - "Arn"
  ELBEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-elb-event-rule"
      Description: "CloudWatch Event triggered on elb"
      EventPattern:
        source:
          - "aws.elasticloadbalancing"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "elasticloadbalancing.amazonaws.com"
          eventName:
            - "CreateLoadBalancer"
            - "ModifyLoadBalancerAttributes"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForELBEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ELBEventRule"
          - "Arn"
  KinesisEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-kinesis-event-rule"
      Description: "CloudWatch Event triggered on kinesis"
      EventPattern:
        source:
          - "aws.kinesis"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "kinesis.amazonaws.com"
          eventName:
            - "CreateStream"
            - "StopStreamEncryption"
            - "DisableEnhancedMonitoring"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForKinesisEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "KinesisEventRule"
          - "Arn"
  KMSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-kms-event-rule"
      Description: "CloudWatch Event triggered on kms"
      EventPattern:
        source:
          - "aws.kms"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "kms.amazonaws.com"
          eventName:
            - "CreateKey"
            - "DisableKeyRotation"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForKMSEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "KMSEventRule"
          - "Arn"
  RDSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-rds-event-rule"
      Description: "CloudWatch Event triggered on rds"
      EventPattern:
        source:
          - "aws.rds"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "rds.amazonaws.com"
          eventName:
            - "CreateDBCluster"
            - "ModifyDBCluster"
            - "CreateDBInstance"
            - "ModifyDBInstance"
            - "ModifyDBClusterSnapshotAttribute"
            - "ModifyDBSnapshotAttribute"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForRDSEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RDSEventRule"
          - "Arn"
  RedshiftEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-redshift-event-rule"
      Description: "CloudWatch Event triggered on redshift cluster"
      EventPattern:
        source:
          - "aws.redshift"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "redshift.amazonaws.com"
          eventName:
            - "CreateCluster"
            - "ModifyCluster"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForRedshiftEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RedshiftEventRule"
          - "Arn"
  S3EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-s3bucket-event-rule"
      Description: "CloudWatch Event triggered on s3 bucket"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "CreateBucket"
            - "PutBucketVersioning"
            - "DeleteBucketEncryption"
            - "PutBucketAcl"
            - "PutBucketPublicAccessBlock"
            - "PutBucketLogging"
            - "PutAccelerateConfiguration"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForS3EventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3EventRule"
          - "Arn"
  SQSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "zcspm-aws-sqs-event-rule"
      Description: "CloudWatch Event triggered on sqs update"
      EventPattern:
        source:
          - "aws.sqs"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "sqs.amazonaws.com"
          eventName:
            - "CreateQueue"
            - "SetQueueAttributes"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForSQSEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "SQSEventRule"
          - "Arn"